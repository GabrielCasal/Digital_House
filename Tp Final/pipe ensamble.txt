from sklearn.base import BaseEstimator, TransformerMixin

class ColumnSelector(BaseEstimator, TransformerMixin):
    def __init__(self, columns):
        self.columns = columns
    
    def transform(self, X, *_):
        if isinstance(X, pd.DataFrame):
            return pd.DataFrame(X[self.columns])
        else:
            raise TypeError("Only works on Pandas DataFrame objects")
    
    def fit(self, X, *_):
        return self

class RFTransformer(RandomForestClassifier, TransformerMixin):
    
     def transform(self, X, *_):
        return self.predict_proba(X)[:, 1]
    
class LogitTransformer(LogisticRegression, TransformerMixin):
        
    def transform(self, X, *_):
        return self.predict_proba(X)[:, 1]


pipe_billing = Pipeline([
    ('column_select_billing', ColumnSelector(['LIMIT_BAL', 'PAY_0', 'PAY_2',
       'PAY_3', 'PAY_4', 'PAY_5', 'PAY_6', 'BILL_AMT1', 'BILL_AMT2',
       'BILL_AMT3', 'BILL_AMT4', 'BILL_AMT5', 'BILL_AMT6', 'PAY_AMT1',
       'PAY_AMT2', 'PAY_AMT3', 'PAY_AMT4', 'PAY_AMT5', 'PAY_AMT6'])),
    ('billing_model', RFTransformer(n_estimators=100))
])

pipe_demo = Pipeline([
    ('column_select_demo', ColumnSelector(['SEX', 'EDUCATION', 'MARRIAGE', 'AGE', 'LIMIT_BAL'])),
    ('demo_model', LogitTransformer())
]) 

union = make_union(pipe_billing, pipe_demo)

final_pipe = Pipeline([
    ('union', union),
    ('model', LogisticRegression())
]) 